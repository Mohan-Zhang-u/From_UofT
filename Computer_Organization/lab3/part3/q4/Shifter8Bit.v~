module top (load_val, load_n, shift, ASR, clk, reset_n, Q);
	input load_n, shift, ASR, clk, reset_n;
	input [7:0] load_val;
	output [7:0] Q;
	wire [7:0] data_to_dff;
	wire [7:0] out;
	wire [7:0] from1;
//	wire [6:0] in;
	wire forasr;
	
	and(forasr,ASR,out[7]);


	mux2to1 M71(
		.x(out[7]),	
		.y(forasr),
		.s(shift),
		.m(from1[7])
	);

	mux2to1 M72(
		.x(load_val[7]),
		.y(from1[7]),
		.s(load_n),
		.m(data_to_dff[7])
	);

	flipflop F7(
		.D(data_to_dff[7]),
		.Q(out[7]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[6] = out[7];

	mux2to1 M61(
		.x(out[6]),	
		.y(out[7]),
		.s(shift),
		.m(from1[6])
	);

	mux2to1 M62(
		.x(load_val[6]),
		.y(from1[6]),
		.s(load_n),
		.m(data_to_dff[6])
	);

	flipflop F6(
		.D(data_to_dff[6]),
		.Q(out[6]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[5] = out[6];

	mux2to1 M51(
		.x(out[5]),	
		.y(out[6]),
		.s(shift),
		.m(from1[5])
	);

	mux2to1 M52(
		.x(load_val[5]),
		.y(from1[5]),
		.s(load_n),
		.m(data_to_dff[5])
	);

	flipflop F5(
		.D(data_to_dff[5]),
		.Q(out[5]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[4] = out[5];

	mux2to1 M41(
		.x(out[4]),	
		.y(out[5]),
		.s(shift),
		.m(from1[4])
	);

	mux2to1 M42(
		.x(load_val[4]),
		.y(from1[4]),
		.s(load_n),
		.m(data_to_dff[4])
	);

	flipflop F4(
		.D(data_to_dff[4]),
		.Q(out[4]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[3] = out[4];

	mux2to1 M31(
		.x(out[3]),	
		.y(out[4]),
		.s(shift),
		.m(from1[3])
	);

	mux2to1 M32(
		.x(load_val[3]),
		.y(from1[3]),
		.s(load_n),
		.m(data_to_dff[3])
	);

	flipflop F3(
		.D(data_to_dff[3]),
		.Q(out[3]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[2] = out[3];

	mux2to1 M21(
		.x(out[2]),	
		.y(out[3]),
		.s(shift),
		.m(from1[2])
	);

	mux2to1 M22(
		.x(load_val[2]),
		.y(from1[2]),
		.s(load_n),
		.m(data_to_dff[2])
	);

	flipflop F2(
		.D(data_to_dff[2]),
		.Q(out[2]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[1] = out[2];

	mux2to1 M11(
		.x(out[1]),	
		.y(out[2]),
		.s(shift),
		.m(from1[1])
	);

	mux2to1 M12(
		.x(load_val[1]),
		.y(from1[1]),
		.s(load_n),
		.m(data_to_dff[1])
	);

	flipflop F1(
		.D(data_to_dff[1]),
		.Q(out[1]),
		.clock(clk),
		.reset(reset_n)
	);

//	assign in[1] = out[2];
	
	assign Q = out;
	
endmodule

module mux2to1(x, y, s, m);
    input x; //selected when s is 0
    input y; //selected when s is 1
    input s; //select signal
    output m; //output
  
    assign m = s & y | ~s & x;
    // OR
    // assign m = s ? y : x;

endmodule 

module flipflop (reset, clock, D, Q);
	input reset, clock;
	input D;
	output Q;
	reg Q; 
	always @(posedge clock)
	begin 
		if (reset == 1'b0)
			Q <= 1'b0;
		else
			Q <= D;
	end
endmodule

//module three_end(i, o1, o2);
//	input i;
//	output o1,o2;
//	assign o1 = i;
//	assign o2 = i;
//endmodule
