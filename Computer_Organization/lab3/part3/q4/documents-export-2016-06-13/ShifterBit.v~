module top (load_val, load_n, shift, ASR, clk, reset_n, Q);
	input load_val, load_n, shift, ASR, clk, reset_n;
	output Q;
	wire data_to_dff;
	wire out;
	wire from1;
	wire ii;
	wire oo1;
	wire oo2;
	
	mux2to1 M61(
		.x(out),	
		.y(ASR),
		.s(shift),
		.m(from1)
	);

	mux2to1 M62(
		.x(load_val),
		.y(from1),
		.s(load_n),
		.m(data_to_dff)
	);

	flipflop F6(
		.D(data_to_dff),
		.Q(out),
		.clock(clk),
		.reset(reset_n)
	);
	
	assign Q = out;
//	three_end e6(
//		.i(ii);
//		.o1(oo1);
//		.o2(oo2);

endmodule

module mux2to1(x, y, s, m);
    input x; //selected when s is 0
    input y; //selected when s is 1
    input s; //select signal
    output m; //output
  
    assign m = s & y | ~s & x;
    // OR
    // assign m = s ? y : x;

endmodule 

module flipflop (reset, clock, D, Q);
	input reset, clock;
	input D;
	output Q;
	reg Q; 
	always @(posedge clock)
	begin 
		if (reset == 1'b0)
			Q <= 1'b0;
		else
			Q <= D;
	end
endmodule

module three_end(i, o1, o2);
	input i;
	output o1,o2;
	assign o1 = i;
	assign o2 = i;
endmodule
